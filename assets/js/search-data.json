{"0": {
    "doc": "Installation Instructions",
    "title": "Installation Instructions",
    "content": "This package is not yet in Metadata.jl, so it can’t be installed with the Julia package manager. To install it, from the Julia REPL: . | Press ] to enter the Pkg REPL mode. | Run the following command: . pkg&gt; add https://github.com/Marcelo-RAF/GeometricFittingProblems.git . | After the installation, press Backspace to return to the Julia REPL. | To start using the package, simply run the following command in the terminal: | . julia&gt; using GeometricFittingProblems . That’s it! Now you can start using the package. ",
    "url": "/GeometricFittingProblems/Installation.html",
    
    "relUrl": "/Installation.html"
  },"1": {
    "doc": "Generate and Load Examples",
    "title": "Generate and load problems",
    "content": "To generate examples, we will use the build_problem function, which can create artificial examples of 2D spheres, 3D spheres, 2D lines, 3D lines, planes, and circles. The input parameters for this function depend on the object to be fitted and can optionally include noise in the points. The function will generate a file with the csv extension, which will contain a matrix with the problem’s points, the number of points, the number of outliers, and whether or not it includes noise. ",
    "url": "/GeometricFittingProblems/examples.html#generate-and-load-problems",
    
    "relUrl": "/examples.html#generate-and-load-problems"
  },"2": {
    "doc": "Generate and Load Examples",
    "title": "Syntax",
    "content": "build_problem(probtype::String, params::Vector{Float64}, noise::Bool) . ",
    "url": "/GeometricFittingProblems/examples.html#syntax",
    
    "relUrl": "/examples.html#syntax"
  },"3": {
    "doc": "Generate and Load Examples",
    "title": "2D-Sphere",
    "content": "To create a 2D sphere example, use the build_problem function with the string “sphere2D” and a vector containing: . | The center coordinates | The radius | The number of points | The number of outliers | A boolean indicating whether to include noise | . Example . For a sphere with center c = (2.0, 3.0), radius 9, containing 23 points, 2 outliers, and including noise: . julia&gt; build_problem(\"sphere2D\", [2.0, 3.0, 9.0, 23.0, 2.0], true) . ",
    "url": "/GeometricFittingProblems/examples.html#2d-sphere",
    
    "relUrl": "/examples.html#2d-sphere"
  },"4": {
    "doc": "Generate and Load Examples",
    "title": "3D-Sphere",
    "content": "For 3D spheres, the process is similar to 2D spheres, with an additional center coordinate. Example . To generate a sphere with center c = (-3.0, 2.0, 1.0), radius 31, containing 80 points, 0 outliers, and no noise: . julia&gt; build_problem(\"sphere3D\", [-3.0, 2.0, 1.0, 31.0, 80.0, 0.0], false) . ",
    "url": "/GeometricFittingProblems/examples.html#3d-sphere",
    
    "relUrl": "/examples.html#3d-sphere"
  },"5": {
    "doc": "Generate and Load Examples",
    "title": "Planes",
    "content": "To create examples of planes, provide: . | A point on the plane | Two non-collinear direction vectors | The number of points | The number of outliers | A boolean indicating whether to include noise | . Example . For a plane passing through point p = (-5.0, 2.0, -1.0) with directions v₁ = (2.0, 3.0, -1.0) and v₂ = (1.0, -3.0, 1.0), containing 120 points, 12 outliers, and including noise: . julia&gt; build_problem(\"plane\", [-5.0, 2.0, -1.0, 2.0, 3.0, -1.0, 1.0, -3.0, 1.0, 120, 12], true) . ",
    "url": "/GeometricFittingProblems/examples.html#planes",
    
    "relUrl": "/examples.html#planes"
  },"6": {
    "doc": "Generate and Load Examples",
    "title": "2D Lines",
    "content": "For 2D lines, specify: . | The slope | The intercept | The number of points | The number of outliers | A boolean indicating whether to include noise | . Example . For a line with slope 3, intercept -8, containing 14 points, 1 outlier, and no noise: . julia&gt; build_problem(\"line2D\", [3.0, -8.0, 14.0, 1.0], false) . ",
    "url": "/GeometricFittingProblems/examples.html#2d-lines",
    
    "relUrl": "/examples.html#2d-lines"
  },"7": {
    "doc": "Generate and Load Examples",
    "title": "3D Lines",
    "content": "To generate a 3D line, provide: . | A point on the line | A direction vector | The number of points | The number of outliers | A boolean indicating whether to include noise | . Example . For a line passing through point p = (-2.0, 0.0, 1.0) with direction vector v = (1.0, 2.0, 1.0), containing 50 points, 12 outliers, and including noise: . julia&gt; build_problem(\"line3D\", [-2.0, 0.0, 1.0, 1.0, 2.0, 1.0, 50.0, 12], true) . ",
    "url": "/GeometricFittingProblems/examples.html#3d-lines",
    
    "relUrl": "/examples.html#3d-lines"
  },"8": {
    "doc": "Generate and Load Examples",
    "title": "Circles",
    "content": "To create circles, specify: . | The center | The radius | Two directions for the plane containing the circle | The number of points | The number of outliers | A boolean indicating whether to include noise | . Example . For a circle centered at c = (-5.0, -2.0, 15.0), radius 29, directions v₁ = (2.0, 1.0, 3.0) and v₂ = (-1.0, 2.0, 2.0), containing 25 points, 2 outliers, and no noise: . julia&gt; build_problem(\"circle\", [-5.0, -2.0, 15.0, 29.0, 2.0, 1.0, 3.0, -1.0, 2.0, 2.0, 25.0, 2.0], false) . ",
    "url": "/GeometricFittingProblems/examples.html#circles",
    
    "relUrl": "/examples.html#circles"
  },"9": {
    "doc": "Generate and Load Examples",
    "title": "Loading Problems",
    "content": "To load a problem generated by the build_problem function, navigate to the directory where the problem was created and use the load_problem function. Example . Suppose the generated file is named sphere2D_-2.0_3.0_9.0_15.0_2.csv. To work with this file, assign the problem to a variable, such as prob. Open the terminal and type: . julia&gt; prob = load_problem(\"sphere2D_-2.0_3.0_9.0_15.0_2.csv\") . With this setup, you can use the commands prob.data, prob.npts, and prob.nout to access the problem’s point matrix, the number of points, and the number of outliers, respectively. ",
    "url": "/GeometricFittingProblems/examples.html#loading-problems",
    
    "relUrl": "/examples.html#loading-problems"
  },"10": {
    "doc": "Generate and Load Examples",
    "title": "Generate and Load Examples",
    "content": " ",
    "url": "/GeometricFittingProblems/examples.html",
    
    "relUrl": "/examples.html"
  },"11": {
    "doc": "How to use",
    "title": "How to use",
    "content": "This section introduces three fitting algorithms: AGCGA, proposed in 1, AACGA, proposed in 2, and the algorithm we propose in this work, ICGA. Additionally, we present a combined fitting and classification algorithm, fittingclass, and a detection algorithm, LOVO-CGA. ",
    "url": "/GeometricFittingProblems/how_to_use.html",
    
    "relUrl": "/how_to_use.html"
  },"12": {
    "doc": "How to use",
    "title": "Fitting",
    "content": "To use any of the fitting algorithms, you need a matrix containing a set of points, where each row represents a point in Euclidean space, and the target object to fit specified as a string. Supported objects include: sphere, plane, circle, line. Syntax . ICGA(data::Matrix, object::String) . Example . Consider a matrix D representing a set of points from a sphere. You can fit the object as follows: . julia&gt; ICGA(D, \"sphere\") . ",
    "url": "/GeometricFittingProblems/how_to_use.html#fitting",
    
    "relUrl": "/how_to_use.html#fitting"
  },"13": {
    "doc": "How to use",
    "title": "Fitting and Classification",
    "content": "To use the fittingclass algorithm, provide a matrix containing a set of points corresponding to the object set Q = {hyperspheres, hyperplanes, hypercircles, lines} and two threshold values, ε₁ and ε₂. For noise generated by a normal distribution, tests conducted with ε₁ = 1.0 and ε₂ = 10e-3 showed good results. Syntax . fittingclass(data::Matrix, ε₁::Float64, ε₂::Float64) . Example . Consider a matrix D representing a set of points. You can apply the algorithm as follows: . julia&gt; fittingclass(D, 1.0, 10e-3) . ",
    "url": "/GeometricFittingProblems/how_to_use.html#fitting-and-classification",
    
    "relUrl": "/how_to_use.html#fitting-and-classification"
  },"14": {
    "doc": "How to use",
    "title": "Detection",
    "content": "To detect objects in the set Q = {hyperspheres, hyperplanes, hypercircles, lines}, use the function LOVOCGA. The input parameters are: a matrix of points, the number of outliers, an initial guess, the method to be used, the object to be detected, and an optional threshold ε (default: 1.0e-4). Syntax . LOVOCGA(data::Matrix, nout::Int, θ::Vector, method::String, object::String, ε=1.0e-4) . Example . Consider a matrix D representing a set of 20 points from a circle, where 4 of them are outliers. You can proceed as follows: . julia&gt; LOVOCGA(D, 4, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], \"AGCGA\", \"circle\", ε=1.0e-4) . ",
    "url": "/GeometricFittingProblems/how_to_use.html#detection",
    
    "relUrl": "/how_to_use.html#detection"
  },"15": {
    "doc": "Home",
    "title": "Welcome to the Geometric Fitting Problems Documentation",
    "content": "This project aims to present algorithms in Geometric Algebra (GA) implemented in the Julia programming language. It includes an algorithm for fitting spheres using tangential distance, planes using orthogonal distance, and an algorithm capable of fitting and classifying objects. Additionally, we introduce a LOVO-CGA algorithm for solving detection problems. ",
    "url": "/GeometricFittingProblems/#welcome-to-the-geometric-fitting-problems-documentation",
    
    "relUrl": "/#welcome-to-the-geometric-fitting-problems-documentation"
  },"16": {
    "doc": "Home",
    "title": "Navigation",
    "content": ". | Home | Installation | Generate Examples | How to Use | . This project was developed by: . Marcelo Renan Augusto Ferreira; . Emerson Vitor Castelani; . Wesley Vagner Inês Shirabayashi. ",
    "url": "/GeometricFittingProblems/#navigation",
    
    "relUrl": "/#navigation"
  },"17": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/GeometricFittingProblems/",
    
    "relUrl": "/"
  }
}
